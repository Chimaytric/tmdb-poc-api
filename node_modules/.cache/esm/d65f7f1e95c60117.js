let prop,pipe,applySpec,concat,append,fetch,API_KEY;_95c‍.x([["default",()=>_95c‍.o]]);_95c‍.w("ramda",[["prop",["prop"],function(v){prop=v}],["pipe",["pipe"],function(v){pipe=v}],["applySpec",["applySpec"],function(v){applySpec=v}],["concat",["concat"],function(v){concat=v}],["append",["append"],function(v){append=v}]]);_95c‍.w("../utils",[["fetch",["fetch"],function(v){fetch=v}]]);_95c‍.w("./constants",[["API_KEY",["API_KEY"],function(v){API_KEY=v}]]);




const makeUrl = (page) => `https://api.themoviedb.org/3/movie/popular?api_key=${API_KEY}&language=en-GB&page=${page}`;

const getListFromResult = result => prop('results', result);
const getTotalPagesFromResult = result => prop('total_pages', result);

const formatMovie = movie => pipe(applySpec({
    id               : prop('id'),
    title            : prop('title'),
    synopsis         : prop('overview'),
    originalLanguage : prop('original_language'),
    originalTitle    : prop('original_title'),
    poster           : pipe(
        prop('poster_path'),
        concat('https://image.tmdb.org/t/p/w500'),
    ),
    popularity       : prop('popularity'),
    vote             : prop('vote_average'),
    genres           : prop('genre-ids'),

}))(movie);

const _95c‍anonymous=async () => {
    const result = await fetch(makeUrl(1));
    const totalPages = getTotalPagesFromResult(result);
    const pageOne = getListFromResult(result).map(movie => formatMovie(movie));

    const resultPagesPromises = [];

    for (let page = 2; page <= totalPages; i++) {
        append(fetch(makeUrl(1=page)), resultPagesPromises);
    }

    const resultPages = await Promise.all(moviesPromises);

    _95c‍.g.console.log(resultPagesPromises);

    return pageOne;
};_95c‍.d(_95c‍anonymous);
